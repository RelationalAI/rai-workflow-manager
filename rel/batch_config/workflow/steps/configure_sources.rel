def BatchWorkflowConfigureSourcesStep(s) { batch_workflow_step:type(s, ConfigureSourcesType) }

module batch_workflow_step
    module configure_sources
        def config_files(st in BatchWorkflowConfigureSourcesStep, f) { batch_workflow_step:configFiles(st, f) }

        def default_container(st in BatchWorkflowConfigureSourcesStep, c) { batch_workflow_step:defaultContainer(st, c) }

        def sources = transpose[batch_source:step]
    end
end

/**
 * Batch Source
 */
value type BatchSourceName = String
entity type BatchSource = BatchWorkflowStep, BatchSourceName

def BatchSource(src) { batch_source:step(src, _) }

module batch_source_name
    def step_source_name_to_source(st in BatchWorkflowConfigureSourcesStep, n, src) {
        batch_workflow_step:json_data(st, :sources, :[], _, :relation, v) and
        n = ^BatchSourceName[v] and
        src = ^BatchSource[st, n]
        from v
    }
end

module batch_source
    def step(src, st) { batch_source_name:step_source_name_to_source(st, _, src) }
    def extensions(src, e) { extract_value:extensions(src, :[], _, e) }
    def date_partitioned(src) { extract_value:isDatePartitioned(src, boolean_true) }
    def chunk_partitioned(src) { extract_value:isChunkPartitioned(src, boolean_true) }
    def relation = extract_value:relation
    def container = extract_value:container
    def relative_path = extract_value:relativePath
    def input_format = extract_value:inputFormat
    def loads_number_of_days = extract_value:loadsNumberOfDays
    def snapshot_validity_days = extract_value:snapshotValidityDays

    @inline
    def extract_value[A](src, val...) {
        n = ^BatchSourceName[batch_workflow_step:json_data[st, :sources, :[], idx, :relation]] and
        src = ^BatchSource[st, n] and
        batch_workflow_step:json_data(st, :sources, :[], idx, A, val...)
        from st, idx, n
    }
end

ic configure_sources_step_default_container_is_mandatory(s) {
    BatchWorkflowConfigureSourcesStep(s)
    implies
    batch_workflow_step:configure_sources:default_container(s, _)
}
