bound simple_relation = String
bound multi_part_relation = String
bound date_partitioned_source = String
bound source_declares_resource = String, String, String
bound source_has_input_format = String, String
bound source_has_container_type = String, String
bound source_catalog
bound simple_source_catalog
bound part_resource_date_pattern = String
bound part_resource_index_pattern = String
bound part_resource_index_multiplier = Int

/**
 * Input formats
 */

value type InputFormatCode = String
entity type InputFormat = InputFormatCode

def InputFormat(f) { input_format:id(f, _) }
def CSVInputFormat = input_format_code:identifies[^InputFormatCode["CSV"]]

module input_format
    def id = transpose[input_format_code:identifies]
end

module input_format_code
    def value = { "CSV" ; "JSON" ; "JSONL" }

    def identifies(c, f) {
        value(v) and
        ^InputFormatCode(v, c) and
        ^InputFormat(c, f)
        from v
    }
end

def input_format_code_to_string = transpose[^InputFormatCode]

/**
 * Container types
 */

value type ContainerTypeCode = String
entity type ContainerType = ContainerTypeCode

def ContainerType(t) { container_type:id(t, _) }

module container_type
    def id = transpose[container_type_code:identifies]
end

module container_type_code
    def value = { "AZURE" ; "LOCAL" ; "SNOWFLAKE" }

    def identifies(c, t) {
        value(v) and
        ^ContainerTypeCode(v, c) and
        ^ContainerType(c, t)
        from v
    }
end

def container_type_code_to_string = transpose[^ContainerTypeCode]
/**
 * Resources
 */

value type URI = String
entity type Resource = URI

def Resource(r) { resource:id(r, _) }

value type PartIndex = Int
def PartResource(r) { part_resource:hashes_to_part_index(r, _) }

module resource
    def id = transpose[uri:identifies]
    
    def part_of = transpose[source:declares]
end

module part_resource
    def hashes_to_date(r, d) {
        uri:identifies(u, r) and
        d = parse_date[ uri:parse[u, "date"], "yyyymmdd"]
        from u
    }

    def shard_alias = "shard"; "rai_shard"

    def hashes_to_part_index(r, n) {
        uri:identifies(^URI[v], r) and
        uri:value(v) and
        parse_part_index[v](n)
        from v
    }

    @inline
    def parse_part_index[v](n) {
        d = parse_int[ uri:parse_value[v, "date"] ] and
        s = parse_int[ uri:parse_value[v, shard_alias] ] and
        n = ^PartIndex[ d * part_resource_index_multiplier + s ]
        from d, s
    }

    @inline
    def parse_part_index[v](n) {
        d = parse_int[ uri:parse_value[v, "date"] ] and
        not uri:parse_value(v, shard_alias, _) and
        n = ^PartIndex[ d * part_resource_index_multiplier ]
        from d
    }

    @inline
    def parse_part_index[v](n) {
        not uri:parse_value(v, "date", _) and
        s = parse_int[ uri:parse_value[v, shard_alias] ] and
        n = ^PartIndex[s]
        from s
    }
end

module uri

    def identifies(u, r) {
        value(v) and
        u = ^URI[v] and
        r = ^Resource[u]
        from v
    }

    def value(v) { source_declares_resource(_, _, v) }

    def parse(u, i, d) {
        value(v) and
        u = ^URI[v] and
        parse_value[v](i, d)
        from v
    }

    @inline
    def parse_value[v](i, d) {
        d = capture_group_by_name[ part_resource_index_pattern, v, 1, i ]
    }

    @inline
    def parse_value[v](i, d) {
        d = capture_group_by_name[ part_resource_date_pattern, v, 1, i ]
    }

end

value type RelationName = String
entity type Relation = RelationName
def Relation(r) { relation:id(r, _) }

module relation
    def id = transpose[rel_name:identifies]
    def relstr[r] = relation_to_string[id[r]]

    def multi_part = rel_name:identifies[ ^RelationName[ multi_part_relation ] ]

    def identifies(r, s) {
        Relation(r) and
        s = ^Source[r]
    }
end

def relation_relname[r] = #(relation:relstr[r])

module rel_name
    def value = simple_relation ; multi_part_relation

    def identifies(n, r) {
        value(v) and
        n = ^RelationName[v] and
        r = ^Relation[n]
        from v
    }

    def identifies_source = transpose[source:relname]

end

/**
 * Sources
 */

entity type Source = Relation
def Source(s) { source:populates(s, _) }
def MultiPartSource(s) {
    relation:multi_part(source:populates[s])
}
def SimpleSource(s) { Source(s) and not MultiPartSource(s) }

ic multi_part_source_declares_part_resources(s) {
    MultiPartSource(s)
    implies
    forall(r in source:declares[s]: PartResource(r))
}

ic source_has_unique_input_format(s) {
    Source(s)
    implies
    source:format(s, _)
}

ic source_has_container_type(s) {
    Source(s)
    implies
    source:container_type(s, _)
}

module source
    def populates = transpose[relation:identifies]

    def declares(s, r) {
        source_declares_resource(rel, _, res) and
        r = uri:identifies[ ^URI[res] ] and
        s = relation:identifies[ rel_name:identifies[ ^RelationName[rel] ] ]
        from rel, res
    }

    def spans[s] = part_resource:hashes_to_date[declares[s]]

    def container(s, c) {
        source_declares_resource(rel, c, _) and
        s = relation:identifies[ rel_name:identifies[ ^RelationName[rel] ] ]
        from rel
    }

    def date_partitioned(s) { s = relation:identifies[ rel_name:identifies[ ^RelationName[date_partitioned_source] ] ] }

    def format(s, f) {
        source_has_input_format(rel, raw_input_format) and
        s = relation:identifies[ rel_name:identifies[ ^RelationName[rel] ] ] and
        f = input_format_code:identifies[^InputFormatCode[raw_input_format]]
        from raw_input_format, rel
    }

    def format(s, f) {
        rel = relation:relstr[source:populates[s]] and
        not source_has_input_format(rel, _) and
        CSVInputFormat(f)
        from rel
    }

    def container_type(s, typ) {
        source_has_container_type(rel, raw_container_type) and
        s = relation:identifies[ rel_name:identifies[ ^RelationName[rel] ] ] and
        typ = container_type_code:identifies[^ContainerTypeCode[raw_container_type]]
        from raw_container_type, rel
    }
end

/**
 * JSON serialization of those resources that we need to load, grouped
 * by source.
 */

def relation_to_string = transpose[^RelationName]
def uri_to_string = transpose[^URI]
def part_index_to_int = transpose[^PartIndex]

def source:index(s, i) = sort[Source](i, s)
def source:date_index(s, d, i) {
    Source(s) and
    sort[dt: source:spans(s, dt)](i, d)
}

def source:relname[s] = relation_relname[source:populates[s]]

def source:populated(s, idx) {
    MultiPartSource(s) and
    rel_name:identifies_source(rn, s) and
    source_catalog(rn, idx, _, _, _)
    from rn
}

def source:populated(s) {
    SimpleSource(s) and
    rel_name:identifies_source(rn, s) and
    simple_source_catalog(rn, x...)
    from rn, x...
}

def source:needs_resource(s) {
    resource:needed(r) and
    not part_resource:hashes_to_date(r, _) and
    resource:part_of(r, s)
    from r
}

def source:needs_resource(s) { source:needs_resource_on_date(s, _) }

def source:needs_resource_on_date(s, d) {
    resource:needed(r) and
    part_resource:hashes_to_date(r, d) and
    resource:part_of(r, s)
    from r
}

def resource:populated(r) {
    source:declares(s, r) and
    source:populated(s)
    from s
}

def resource:populated(r) {
    source:declares(s, r) and
    idx = part_index_to_int[part_resource:hashes_to_part_index[r]] and
    source:populated(s, idx)
    from idx, s
}

def resource:needed(r) { Resource(r) and not resource:populated(r) }

def resource:index(s, d, r, i) {
    source:spans(s, d) and
    sort[res:
         resource:needed(res) and
         resource:part_of(res, s) and
         part_resource:hashes_to_date(res, d)](i, r)
}

def resource:index(s, r, i) {
    not source:date_partitioned(s) and
    sort[res:
         resource:needed(res) and
         resource:part_of(res, s)](i, r)
}

ic resource_part_index_is_unique_within_source(s, r1, r2, n) {
    source:declares(s, r1) and
    source:declares(s, r2) and
    part_resource:hashes_to_part_index(r1, n) and
    part_resource:hashes_to_part_index(r2, n)
    implies
    r1 = r2
}

def missing_resources_json(:[], n, :source, name) {
    source:needs_resource(s) and
    source:index[s] = n and
    name = relation_to_string[ relation:id[ source:populates[s] ] ]
    from s
}

def missing_resources_json(:[], n, :is_multi_part, "Y") {
    source:needs_resource(s) and
    source:index[s] = n and
    MultiPartSource(s)
    from s
}

def missing_resources_json(:[], n, :container, v) {
    source:needs_resource(s) and
    source:index[s] = n and
    source:container(s, v)
    from s
}

def missing_resources_json(:[], n, :container_type, typ) {
    source:needs_resource(s) and
    source:index[s] = n and
    typ = container_type_code_to_string[ container_type:id[ source:container_type[s] ] ]
    from s
}

def missing_resources_json(:[], n, :is_date_partitioned, v) {
    source:needs_resource(s) and
    source:index[s] = n and
    ( source:date_partitioned(s) and
      v = "Y"
      or
      not source:date_partitioned(s) and
      v = "F" )
    from s
}

def missing_resources_json(:[], i, :resources, :[], k, :uri, n) {
    source:index[s] = i and
    resource:index[s, r] = k and
    n = uri_to_string[ resource:id[r] ]
    from s, r
}

def missing_resources_json(:[], i, :resources, :[], k, :part_index, n) {
    source:index[s] = i and
    resource:index[s, r] = k and
    n = part_resource:hashes_to_part_index[r]
    from s, r
}


def missing_resources_json(:[], n, :file_type, typ) {
    source:needs_resource(s) and
    source:index[s] = n and
    typ = input_format_code_to_string[ input_format:id[ source:format[s] ] ]
    from s
}

def missing_resources_json(:[], i, :dates, :[], j, :date, dstr) {
    source:needs_resource_on_date(s, d) and
    source:index[s] = i and
    source:date_index[s, d] = j and
    dstr = format_date[d, "yyyymmdd"]
    from s, d
}

def missing_resources_json(:[], i, :dates, :[], j, :resources, :[], k, :uri, n) {
    source:needs_resource_on_date(s, d) and
    source:index[s] = i and
    source:date_index[s, d] = j and
    resource:index[s, d, r] = k and
    n = uri_to_string[ resource:id[r] ]
    from s, r, d
}

def missing_resources_json(:[], i, :dates, :[], j, :resources, :[], k, :part_index, n) {
    source:needs_resource_on_date(s, d) and
    source:index[s] = i and
    source:date_index[s, d] = j and
    resource:index[s, d, r] = k and
    n = part_resource:hashes_to_part_index[r]
    from s, r, d
}

/*
 * Declared date partitioned sources
 */
module declared_date_partitioned_source

    def path_on_date(rel, d, p) {
        source_declares_resource(rel, _, p) and
        r = ^RelationName[rel] . rel_name:identifies . relation:identifies . source:declares and
        resource:id(r, ^URI[p]) and
        uri:identifies(u, r) and
        d = uri:parse[u, "date"]
        from r, u
    }

    def date(s, d) = path_on_date(s, d, _)

    def id(s) = date(s, _)

    def index = enumerate[id]
    def date_idx = enumerate[date]
    def path_idx = enumerate[path_on_date]

    def json(:[], idx, :source, s) {
        index(idx, s)
    }

    def json(:[], idx, :dates, :[], d_idx, :date, d) {
        index(idx, s) and
        date_idx(d_idx, s, d)
        from s
    }

    def json(:[], idx, :dates, :[], d_idx, :paths, :[], p_idx, p) {
        index(idx, s) and
        date_idx(d_idx, s, d) and
        path_idx(p_idx, s, d, p)
        from s, d
    }
end

/**
 */

entity type BatchArtifact:import = RelationName, Int
entity type BatchArtifact:export = RelationName, Int

def Workflow(wf) {
    batch_artifact:is_import(wf, _) or
    batch_artifact:is_export(wf, _)
}

def ImportArtifact(a) = batch_artifact:is_import(_, a)
def ExportArtifact(a) = batch_artifact:is_export(_, a)
def BatchArtifact = ImportArtifact ; ExportArtifact

def import_object[wf, r] = batch:config[wf, :workflow, :[], _, :sources, :[], r]
def export_object[wf, r] = batch:config[wf, :workflow, :[], _, :exports, :[], r]

module batch_artifact

    def future(wf, a in ImportArtifact) {
        import_object(wf, row[wf, a], :future, boolean_true)
    }

    def future(wf, a in ExportArtifact) {
        export_object(wf, row[wf, a], :future, boolean_true)
    }

    def name(wf, a in ImportArtifact, n) {
        import_object(wf, row[wf, a], :relation, n)
    }

    def name(wf, a in ExportArtifact, n) {
        export_object(wf, row[wf, a], :configRelName, n)
    }

    def location(wf, a in ImportArtifact, l) {
        import_object(wf, row[wf, a], :relativePath, l)
    }

    def location(wf, a in ExportArtifact, l) {
        export_object(wf, row[wf, a], :relativePath, l)
    }

    def is_import(wf, a) { ^BatchArtifact:import(wf, row[wf, a], a) }
    def is_export(wf, a) { ^BatchArtifact:export(wf, row[wf, a], a) }

    def row(wf, a, r) {
        import_object(wf, r, x...) and
        ^BatchArtifact:import(wf, r, a)
        from x...
    }

    def row(wf, a, r) {
        export_object(wf, r, x...) and
        ^BatchArtifact:export(wf, r, a)
        from x...
    }

end

module import_artifact[wf in Workflow]
    def source_of(a, s) {
        ImportArtifact(a) and
        s = relation:identifies[
                rel_name:identifies[
                    ^RelationName[batch_artifact:name[wf, a]] ] ]
    }

    def populated(a) { source:populated(source_of[a]) }
    def populated_at(a, d) {
        source:populated(source_of[a], idx) and
        d = trunc_to_int[idx / part_resource_index_multiplier]
        from idx
    }

    def populated_days[a] = count[populated_at[a]]

    def requested_days(a, d) {
        ImportArtifact(a) and
        import_object(wf, batch_artifact:row[wf, a], :loadsNumberOfDays, d)
    }

end

module export_artifact_report[wf in Workflow]

     def future(a, b) {
        batch_artifact:is_export(wf, a) and
        ( boolean_false(b) and not batch_artifact:future(wf, a)
          or
          boolean_true(b) and batch_artifact:future(wf, a) )
    }

    def name(a, n) { ExportArtifact(a) and batch_artifact:name(wf, a, n) }
    def location(a, l) { ExportArtifact(a) and batch_artifact:location(wf, a, l) }

end

module import_artifact_report[wf in Workflow]

     def future(a, b) {
        batch_artifact:is_import(wf, a) and
        ( boolean_false(b) and not batch_artifact:future(wf, a)
          or
          boolean_true(b) and batch_artifact:future(wf, a) )
    }

    def populated(a, b) {
        boolean_true(b) and
        ( import_artifact(wf, :populated, a) or
          import_artifact(wf, :populated_days, a, _) )
    }

    def populated_days = import_artifact[wf, :populated_days]
    def requested_days = import_artifact[wf, :requested_days]
    def name(a, n) { ImportArtifact(a) and batch_artifact:name(wf, a, n) }
    def location(a, l) { ImportArtifact(a) and batch_artifact:location(wf, a, l) }

end

module import_artifact_report_config[wf in Workflow]
    def data = import_artifact_report[wf]

    def syntax:header = {
        1, :future ;
        2, :name ;
        3, :location ;
        4, :populated ;
        5, :populated_days ;
        6, :requested_days
    }

end

module export_artifact_report_config[wf in Workflow]
    def data = export_artifact_report[wf]

    def syntax:header = {
        1, :future ;
        2, :name ;
        3, :location
    }

end