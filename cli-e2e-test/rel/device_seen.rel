module import_config[:device_seen_snapshot]
    def schema {
        (:device, "string") ;
        (:last_seen, "date")
    }

    declare syntax(:header, __trail...) requires true

    @inline
    def row_key_map({R}, idx, row, key): {
        ^Device(R[idx, :device, row], key)
    }
end

@inline def ^Device { make_entity_hash[{:"Device"}, {String}] }

/*
 * device_seen snapshot is a snapshot of the last time a device was seen, which is
 * essentially an aggregation over the snapshot data and the current day's data
 * found in the `device` relation.
 */

def current_date { max[source[:spans, _]] }
def device_seen_today(n, t): {
    device(:name, n) and
    t = current_date
}

def device_last_seen[d]: max[(t): device_seen_today(d, t)
    or
    (
        exists((key) |
        snapshot_catalog(:device_seen_snapshot, :device, key, d) and
        snapshot_catalog(:device_seen_snapshot, :last_seen, key, t))
    )
]

module device_seen_snapshot_updated
    def device(k, d): { device_last_seen(d, _) and k = d }
    def last_seen(d, t): { device_last_seen(d, t) }
end
